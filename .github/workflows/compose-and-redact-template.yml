#---------------------------------------------------------------------------------------------------------------------------------------------------
#                                       Reusable Workflow responsible for composing a billing_ilt template
#---------------------------------------------------------------------------------------------------------------------------------------------------
#
# Composes a new repo based on the client and server inputs and redacts the solution
#
#---------------------------------------------------------------------------------------------------------------------------------------------------

name: Compose the Billing ILT Template

on: 
  workflow_call:
    inputs:      
      client: 
        type: string
        required: true
        description: Client language/framework
      server: 
        type: string
        required: true
        description: Server language/framework
      prefix:
        type: string
        required: true
        description: Repo prefix
      suffix:
        type: string
        required: true
        description: Repo suffix
    secrets:
      token:
        required: true
      copybara_ssh_key:
        required: true
      bot_name:
        required: true
      bot_email:
        required: true

jobs:
  compose:
    name: Redact Solution
    runs-on: ubuntu-latest
    env: 
      org: stripe-certification
    steps:
      - name: Get Token
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.token }})"
          echo "::add-mask::$TOKEN"
          echo "github-token=$TOKEN" >> $GITHUB_ENV

      - name: Get Name
        run: |
          SOURCE_NAME=${{ github.event.repository.name }}
          TARGET_NAME=${{ inputs.prefix }}_${{ inputs.server }}_${{ inputs.client }}_${{ inputs.suffix }}
          echo "target-name=$TARGET_NAME" >> $GITHUB_ENV

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ env.github-token }}
          path: source
          
      - name: Update Copybara Script
        run: |
          sed -i -e 's/repo_name/billing_ilt/g' ${{ github.workspace }}/source/copy.bara.sky
        working-directory: ${{ github.workspace }}/source

      - name: Checkout Redacted Code
        if: ${{ steps.target_exists.outcome != 'failure' }}
        run: |
          git checkout -b redacted-code
        working-directory: ${{ github.workspace }}/source
      
      - name: Redact and Push
        uses: olivr/copybara-action@v1.2.3
        with:
          access_token: ${{ env.github-token }}
          ssh_key: ${{ secrets.copybara_ssh_key }}
          custom_config: source/copy.bara.sky
          copybara_options: --force --git-committer-email=${{ secrets.APP_EMAIL }} --git-committer-name=${{ secrets.APP_NAME }}
          workflow: push    

      - name: Check if Target exists
        id: target_exists
        continue-on-error: true
        run: |
          echo ${{ env.github-token }} > .githubtoken
          gh auth login --with-token < .githubtoken
          rm .githubtoken
          gh repo view ${{ env.org }}/${{ env.target-name }} >/dev/null

      - name: Create Target
        if: ${{ steps.target_exists.outcome == 'failure' }}
        run: |                
          gh repo create ${{ env.org }}/${{ env.target-name }} --private --gitignore VisualStudio
          gh repo edit ${{ env.org }}/${{ env.target-name }} --template

      - name: Checkout Target Main
        if: ${{ steps.target_exists.outcome == 'failure' }}
        uses: actions/checkout@v4
        with: 
          repository: ${{ env.org }}/${{ env.target-name }}
          ref: main
          token: ${{ env.github-token }}
          path: target
      
      - name: Copy Contents
        run: |
          rm -rfv ${{ github.workspace }}/target/{*,.gitignore}
          mkdir -p ${{ github.workspace }}/target/.github/workflows && mkdir ${{ github.workspace }}/target/code
          cp -R ${{ github.workspace }}/source/clients/${{ inputs.client }}/client ${{ github.workspace }}/target/code
          cp -R ${{ github.workspace }}/source/servers/${{ inputs.server }}/* ${{ github.workspace }}/target/code
          cp -R ${{ github.workspace }}/source/README.md ${{ github.workspace }}/target
          sed -i -e 's/repo_name/billing_ilt/g' ${{ github.workspace }}/source/copy.bara.sky
        working-directory: ${{ github.workspace }}/target

      - name: Update PORT variable if React
        run: |
          if ${{ inputs.client == 'react' }}
          then
              sed -i '/^PORT=/s/=.*/=3000\n/' .env.example
          fi
        working-directory: ${{ github.workspace }}/target/code/server

      - name: Spread out the thundering herd over 60s
        run: |
          sleep $((RANDOM % 60))
      
      - name: Push to All
        if: ${{ steps.target_exists.outcome == 'failure' }}
        run: |
          git config user.name "${{ secrets.bot_name }}"
          git config user.email "${{ secrets.bot_email }}"
          git add .
          git commit -m "${{ github.event.head_commit.message }}"
          git push --set-upstream origin main
        working-directory: ${{ github.workspace }}/target

